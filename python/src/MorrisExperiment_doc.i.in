%define OTMORRIS_MorrisExperiment_doc
"MorrisExperiment builds experiments for the Morris method.

Available constructors:

    MorrisExperiment(levels, N)

    MorrisExperiment(levels, interval, N)

    MorrisExperiment(lhsDesign, N)

    MorrisExperiment(lhsDesign, interval, N)

Parameters
----------
levels : :py:class:`openturns.Indices`
    Number of levels for a regular grid
N : int
    Number of trajectories
interval : :py:class:`openturns.Interval`
    Bounds of the domain
lhsDesign : :py:class:`openturns.NumericalSample`
    Initial design

Notes
-----
With first constructor, we consider that initial experiment is a regular grid defined in :math:`[0,1]^d`.
With second constructor, we consider that initial distribution model is uniform with bounds given by the interval argument. Also, the initial experiment is of type regular.
With third argument, we fix the initial design which could be an LHS, an optimal LHS defined in :math:`[0,1]^d`.
Finally the fourth constructor requires an LHS design and bounds.
"
%enddef
%feature("docstring") OTMORRIS::MorrisExperiment
OTMORRIS_MorrisExperiment_doc

// ---------------------------------------------------------------------
%define OTMORRIS_MorrisExperiment_generate_doc
"Generate points according to the type of the experiment.

Returns
-------
sample : :py:class:`openturns.NumericalSample`
    Points that constitute the design of experiment, of size :math:`N \times (p+1)`

Examples
--------
>>> import openturns as ot
>>> import otmorris
>>> ot.RandomGenerator.SetSeed(1)
>>> r = 5
>>> # Define experiments in [0,1]^2
>>> morris_experiment = otmorris.MorrisExperiment([3, 3], r)
>>> X = morris_experiment.generate()

"
%enddef

%feature("docstring") OTMORRIS::MorrisExperiment::generate
OTMORRIS_MorrisExperiment_generate_doc

// ---------------------------------------------------------------------

%define OTMORRIS_MorrisExperiment_getJumpStep_doc
"Get the jump step,  specifying the number of levels for each factor that are increased/decreased for computing the
elementary effects. If not given, it is set to 1 for each factor.
Notice that the jump step plays a role only in initial grids and not LHS.

Returns
-------
humpStep : :py:class:`openturns.NumericalPoint`
    Number of levels for each factot that are increased/decreased for computating the EE.

"
%enddef

%feature("docstring") OTMORRIS::MorrisExperiment::getJumpStep
OTMORRIS_MorrisExperiment_getJumpStep_doc

// ---------------------------------------------------------------------
%define OTMORRIS_MorrisExperiment_setJumpStep_doc
"Set the jump step,  specifying the number of levels for each factor that are increased/decreased for computing the
elementary effects. If not given, it is set to 1 for each factor.
Notice that the jump step plays a role only in initial grids and not LHS.


Parameters
----------
humpStep : :py:class:`openturns.NumericalPoint`
    Number of levels for each factot that are increased/decreased for computating the EE.

Notes
-----
The final jump step contains only integers, so the parameter argument is converted into a list of integer thanks to the 
floor operator.
"
%enddef

%feature("docstring") OTMORRIS::MorrisExperiment::setJumpStep
OTMORRIS_MorrisExperiment_setJumpStep_doc
// ---------------------------------------------------------------------
%define OTMORRIS_MorrisExperiment_GenerateLHS_doc
"Generate a centered LHS design.

Parameters
----------
bounds : :py:class:`~openturns.Interval`
    Bounds of the uniform distributions.
size : int
    Size of the design.

Returns
-------
sample : :py:class:`openturns.NumericalSample`
    a LHS experiment

Examples
--------
>>> import openturns as ot
>>> import otmorris
>>> # We fix lower bounds = [-1,-2,-3]
>>> # and upper bounds = [1,2,3]
>>> bounds = ot.Interval(2)
>>> size = 20 # size of the design
>>> design = otmorris.MorrisExperiment.GenerateLHS(bounds, size)"
%enddef

%feature("docstring") OTMORRIS::MorrisExperiment::GenerateLHS
OTMORRIS_MorrisExperiment_GenerateLHS_doc

// ---------------------------------------------------------------------
